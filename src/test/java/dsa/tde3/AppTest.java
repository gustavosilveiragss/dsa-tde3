/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dsa.tde3;

import org.junit.Test;
import static org.junit.Assert.*;

import java.util.Random;

public class AppTest {
//    private static final int[] SIZES = {1_000, 10_000, 100_000, 1_000_000};
    private static final int[] SIZES = {10, 100, 1_000};
    private static final int ROUNDS = 5;
    private final Random rand = new Random(2); // Seed fixa para garantir reprodutibilidade

    @Test
    public void testAllAlgorithms() {
//        testBogoSort();
        testMergeSort();
        testShellSort();
    }

    @Test
    public void testBogoSort() {
        testSortingAlgo(new BogoSort(false));
    }

    @Test
    public void testMergeSort() {
        testSortingAlgo(new MergeSort(false));
    }

    @Test
    public void testShellSort() {
        testSortingAlgo(new ShellSort(false));
    }

    private void testSortingAlgo(SortingAlgorithm sortingAlgorithm) {
        System.out.println("Testing " + sortingAlgorithm.getClass().getSimpleName() + "...");
        for (int size : SIZES) {
            long totalTime = 0;

            for (int round = 0; round < ROUNDS; round++) {
                int[] arr = generateArray(size);
//                int[] arr = {5, 2, 4, 6, 1, 3};
                long startTime = System.nanoTime();

                sortingAlgorithm.sort(arr);
                assertTrue(sortingAlgorithm.isSorted(arr));

                long endTime = System.nanoTime();
                long roundTime = endTime - startTime;
                totalTime += roundTime;

                System.out.printf("Size: %d, Round: %d, Time: %s%n", size, round + 1, formatTime(roundTime));
            }

            System.out.printf("Average time for size %d: %s%n%n", size, formatTime(totalTime / ROUNDS));
        }
    }

    private int[] generateArray(int size) {
        int[] arr = new int[size];
        for (int i = 0; i < size; i++)
            arr[i] = rand.nextInt(1000000);
        return arr;
    }

    private static String formatTime(long ns) {
        if (ns < 1_000_000)
            return String.format("%d ns", ns);
        return String.format("%d ns (%.2f ms)", ns, ns / 1_000_000.0);
    }
}