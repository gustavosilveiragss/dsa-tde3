/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dsa.tde3;

import org.junit.Test;
import static org.junit.Assert.*;

import java.util.Random;

public class AppTest {
    private static final boolean DEBUG = false;
    private static final int[] SIZES = DEBUG ? new int[]{10} : new int[]{1_000, 10_000, 100_000};
    private static final int ROUNDS = DEBUG ? 1 : 5;
    private final Random rand = new Random(64); // Seed fixa para garantir reprodutibilidade

    @Test
    public void testBogoSort() {
        testSortingAlgo(new BogoSort(DEBUG));
    }

    @Test
    public void testMergeSort() {
        testSortingAlgo(new MergeSort(DEBUG));
    }

    @Test
    public void testShellSort() {
        testSortingAlgo(new ShellSort(DEBUG));
    }

    @Test
    public void testCocktailSort() {
        testSortingAlgo(new CocktailSort(DEBUG));
    }

    @Test
    public void testBubbleSort() {
        testSortingAlgo(new BubbleSort(DEBUG));
    }

    @Test
    public void testBubbleCocktail() {
        testBubbleSort();
        testCocktailSort();
    }

    @Test
    public void testInsertionSort() {
        testSortingAlgo(new InsertionSort(DEBUG));
    }

    @Test
    public void testAllAlgorithms() {
//        testBogoSort();
        testMergeSort();
        testShellSort();
        testCocktailSort();
        testBubbleSort();
        testInsertionSort();
    }

    private void testSortingAlgo(SortingAlgorithm sortingAlgorithm) {
        System.out.println("Testando " + sortingAlgorithm.getClass().getSimpleName() + "...");
        for (int size : SIZES) {
            long totalTime = 0;

            for (int round = 0; round < ROUNDS; round++) {
                int[] arr = DEBUG ? new int[]{5, 2, 4, 6, 1, 3, 8, 6, 9, 7} : TestingUtils.generateArray(rand, size);
                long startTime = System.nanoTime();

                sortingAlgorithm.sort(arr);
                assertTrue(sortingAlgorithm.isSorted(arr));

                long endTime = System.nanoTime();
                long roundTime = endTime - startTime;
                totalTime += roundTime;

                System.out.printf("Tamanho: %d, Round: %d, Tempo: %s%n", size, round + 1, TestingUtils.formatTime(roundTime));
            }

            System.out.printf("Tempo mÃ©dio para tamanho %d: %s%n%n", size, TestingUtils.formatTime(totalTime / ROUNDS));
        }
    }
}